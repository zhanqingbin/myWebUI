/**
 *  @name:      redcore-webUI
 *  @version:   1.0.0
 *  @author:    redcore
 *  @desc:      redcore 内核webUI 页面开发
 *  @license:   ISC
 *  @copyright: Copyright 2018 The Redcore (Beijing) Technology Co.,Ltd. All rights reserved.
 */
{"version":3,"sources":["login/HomeProxy.js"],"names":["HOMEBROWSER","HomeProxy","prototype","LOGINSTATUS","BROWSERNOTIFICATION","BrowserNotification","this","handlers","constructor","registNotification","type","target","handler","push","fireNotification","notification","Array","i","length","ret","return","undefined","setTimeout","removeNotification","splice","proxyCallBack","getDeviveIdCallback","deviceId","getFirstLoginCallback","firstLogin","getLoggingStatusCallback","loggingStatus","msg","status","message","getAppGroupListCallback","list","getAccountInfoCallback","info","setAutoLoginCallback","getAutoLoginCallback","autoLogin","setManagerAddressCallback","address","getManagerAddressCallback","getLastLoginInfoCallback","logOutCallback","ACCOUNTINFO","init","HomeBrowser","login","domain","email","password","command","logout","setAutoLogin","getAutoLogin","setManagerAddress","getManagerAddress","getDeviceId","getFirstLogin","getLoggingStatus","getLastLoginInfo","getAppGroupList","getAccountInfo","setApplicationInfo","applicationId","err","alert","unregistNotification"],"mappings":"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","file":"../../src/login/HomeProxy.js","sourcesContent":["/*\r\n * HomeProxy.js  首页数据模块\r\n * 功能：向浏览器端、服务器端获取最新数据，之后渲染首页面\r\n */\r\n\r\nvar HOMEBROWSER = null;\r\nvar HomeProxy = function () { };\r\n\r\nHomeProxy.prototype = function () {\r\n\r\n    var LOGINSTATUS = null;  // 保留当前用户登录状态\r\n    var BROWSERNOTIFICATION = null; // 保留与浏览器通信模块的instance。\r\n\r\n    //自定义通告构造函数\r\n    function BrowserNotification() {\r\n        //通告处理程序数组集合\r\n        this.handlers = {};\r\n    }\r\n    //自定义通告的原型对象\r\n    BrowserNotification.prototype = {\r\n        //设置原型构造函数链\r\n        constructor: BrowserNotification,\r\n        //注册给定类型的通告处理程序，\r\n        //type -> 自定义通告类型，target->定义通告发往的对象， handler -> 自定义通告回调函数\r\n        registNotification: function (type, target, handler) {\r\n            //判断通告处理数组是否有该类型通告\r\n            if (typeof this.handlers[type] == 'undefined') {\r\n                this.handlers[type] = [];\r\n            }\r\n            //将处理通告push到通告处理数组里面\r\n            this.handlers[type].push([target, handler]);\r\n        },\r\n\r\n        //触发一个通告\r\n        fireNotification: function (notification) {\r\n            //判断是否存在该通告类型\r\n            if (this.handlers[notification.type] instanceof Array) {\r\n                var handlers = this.handlers[notification.type];\r\n                //在同一个通告类型下的可能存在多种处理通告，找出本次需要处理的通告\r\n                for (var i = 0; i < handlers.length; i++) {\r\n                    //执行触发\r\n                    var ret = notification.return\r\n                    var handler = handlers[i][1];\r\n                    if (ret != undefined)\r\n                        setTimeout(function () { handler(ret); }, 0);\r\n                    else\r\n                        setTimeout(function () { handler(); }, 0);\r\n                }\r\n            }\r\n        },\r\n\r\n        //注销通告\r\n        //type -> 自定义通告类型，target->定义通告发往的对象， handler -> 自定义通告回调函数\r\n        removeNotification: function (type, target, handler) {\r\n            if (this.handlers[type] instanceof Array) {\r\n                var handlers = this.handlers[type];\r\n                //在同一个通告类型下的可能存在多种处理通告\r\n                for (var i = 0; i < handlers.length; i++) {\r\n                    //找出本次需要处理的通告下标\r\n                    if (handlers[i][0] == target && handler != undefined && handlers[i][1] == handler) \r\n                        handlers.splice(i, 1);\r\n                    else if (handlers[i][0] == target && handler == undefined)\r\n                        handlers.splice(i, 1);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // 从浏览器得到当前登录状态--浏览器回调方法\r\n    var _getLoggingStatusCallback = function (loggingStatus, msg) {\r\n        if (LOGINSTATUS != loggingStatus || msg != undefined) {\r\n            LOGINSTATUS = loggingStatus;\r\n            BROWSERNOTIFICATION.fireNotification({ type: \"LOGGING_STATUS_NOTIFICATION\", return : {status: loggingStatus, message: msg }});\r\n        }\r\n    };\r\n\r\n      // 当前用户退出后回调此方法\r\n    var _logOutCallback = function () {\r\n        LOGINSTATUS = null;\r\n        ACCOUNTINFO = {};\r\n        // BROWSERNOTIFICATION.fireNotification({ type: \"LOGOUTED_NOTIFICATION\", return: address });\r\n        BROWSERNOTIFICATION.fireNotification({ type: \"LOGOUTED_NOTIFICATION\"});\r\n    };\r\n\r\n    // 添加指定调用的回调。\r\n    var _registNotification = function (type, target, handler) {\r\n\t    try {\r\n\t        if (type == \"GET_DEVICEID_NOTIFICATION\" ||\r\n\t            type == \"GET_FIRST_LOGIN_NOTIFICATION\" ||\r\n\t            type == \"LOGGING_STATUS_NOTIFICATION\" ||\r\n                type == \"GET_ACCOUNT_INFO_NOTIFICATION\" ||\r\n                type == \"GET_APP_GROUP_LIST_NOTIFICATION\" ||\r\n                type == \"GET_AUTO_LOGIN_NOTIFICATION\" ||\r\n                type == \"SET_AUTO_LOGIN_NOTIFICATION\" ||\r\n                type == \"GET_MANAGER_ADDRESS_NOTIFICATION\" ||\r\n                type == \"SET_MANAGER_ADDRESS_NOTIFICATION\" ||\r\n                type == \"LOGOUTED_NOTIFICATION\" ||\r\n                type == \"GET_LAST_LOGIN_INFO_NOTIFICATION\") {\r\n\t            BROWSERNOTIFICATION.registNotification(type, target, handler);\r\n\t        }\r\n\t        else\r\n                throw type + \" is not supported!\"\r\n\t    }\r\n\t    catch (err) {\r\n\t        alert(err);\r\n\t    }\r\n\t};\r\n\r\n    // 删除指定调用的回调。\r\n    var _unregistNotification = function (type, target, handler) {\r\n\t    try {\r\n\t        if (type == \"GET_DEVICEID_NOTIFICATION\" ||\r\n\t            type == \"GET_FIRST_LOGIN_NOTIFICATION\" ||\r\n\t            type == \"LOGGING_STATUS_NOTIFICATION\" ||\r\n                type == \"GET_ACCOUNT_INFO_NOTIFICATION\" ||\r\n                type == \"GET_APP_GROUP_LIST_NOTIFICATION\" ||\r\n                type == \"GET_AUTO_LOGIN_NOTIFICATION\" ||\r\n                type == \"SET_AUTO_LOGIN_NOTIFICATION\" ||\r\n                type == \"GET_MANAGER_ADDRESS_NOTIFICATION\" ||\r\n                type == \"SET_MANAGER_ADDRESS_NOTIFICATION\" ||\r\n                type == \"LOGOUTED_NOTIFICATION\" ||\r\n                type == \"GET_LAST_LOGIN_INFO_NOTIFICATION\") {\r\n\t            BROWSERNOTIFICATION.removeNotification(type, target, handler);\r\n\t        }\r\n\t        else\r\n\t            throw type + \" is not supported!\"\r\n\t    }\r\n\t    catch (err) {\r\n\t        alert(err);\r\n\t    }\r\n\t};\r\n\r\n\tvar proxyCallBack = {\r\n        // 从浏览器得到deviceId--浏览器回调方法\r\n        getDeviveIdCallback: function (deviceId) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_DEVICEID_NOTIFICATION\", return: deviceId }); },\r\n        // 从浏览器得到是否是第一次打开--浏览器回调方法\r\n        getFirstLoginCallback: function (firstLogin) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_FIRST_LOGIN_NOTIFICATION\", return: firstLogin }); },\r\n\t    // 设置登录状态完成--浏览器回调方法\r\n\t\tgetLoggingStatusCallback   : _getLoggingStatusCallback,\r\n\t    // 从浏览器得到datajs--浏览器回调方法\r\n\t\tgetAppGroupListCallback    : function (list) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_APP_GROUP_LIST_NOTIFICATION\", return: list }); },\r\n\t    // 从浏览器得到用户信息--浏览器回调方法\r\n\t\tgetAccountInfoCallback: function (info) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_ACCOUNT_INFO_NOTIFICATION\", return: info }); },\r\n\t    // 设置自动登录状态完成时浏览器回调此方法\r\n        setAutoLoginCallback       : function () { BROWSERNOTIFICATION.fireNotification({ type: \"SET_AUTO_LOGIN_NOTIFICATION\" }); }, \r\n\t    // 从浏览器得到自动登录状态--浏览器回调方法\r\n        getAutoLoginCallback       : function (autoLogin) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_AUTO_LOGIN_NOTIFICATION\", return: autoLogin }); },\r\n\t    // 设置EnterManager地址--浏览器回调方法\r\n        setManagerAddressCallback  : function (address) { BROWSERNOTIFICATION.fireNotification({ type: \"SET_MANAGER_ADDRESS_NOTIFICATION\" }); },\r\n\t    // 从浏览器得到EnterManager地址--浏览器回调方法\r\n        getManagerAddressCallback  : function (address) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_MANAGER_ADDRESS_NOTIFICATION\", return: address }); },\r\n\t    // 从浏览器得到上次登录时的账号信息--浏览器回调方法\r\n        getLastLoginInfoCallback: function (info) { BROWSERNOTIFICATION.fireNotification({ type: \"GET_LAST_LOGIN_INFO_NOTIFICATION\", return: info }); },\r\n\t    // 当前用户退出登录\r\n        logOutCallback             : _logOutCallback\r\n\t};\r\n\r\n\treturn {\r\n        // 首页调用此方法初始化HomeProxy及其相关模块\r\n\t    init: function () {\r\n\t        BROWSERNOTIFICATION = new BrowserNotification();\r\n\t        HOMEBROWSER = new HomeBrowser();\r\n\t        HOMEBROWSER.init(proxyCallBack);\r\n\t    },\r\n\r\n\t    // 用户登录时调用此方法。登录状态在LOGGING_STATUS_NOTIFICATION通知中\r\n\t    login                    : function (domain, email, password) { HOMEBROWSER.command(\"login\", [domain, email, password]); },\r\n\t    // 用户退出登录时调用此方法。退出完成后HomeProxy中的Cache被清空。\r\n        logout                   : function () { HOMEBROWSER.command(\"logout\"); },\r\n\r\n\t    // 上层调用此方法设置自动登录状态，调用完成后触发SET_AUTO_LOGIN_NOTIFICATION通知。\r\n\t\tsetAutoLogin             : function (autoLogin) { HOMEBROWSER.command(\"setParam\", [\"autoLogin\", autoLogin]); }, \r\n\t    // 上层调用此方法获得自动登录状态，调用完成后触发GET_AUTO_LOGIN_NOTIFICATION通知。\r\n        getAutoLogin             : function () { HOMEBROWSER.command(\"getParam\", [\"autoLogin\"]) }, \r\n\t    // 上层调用此方法设置服务器地址,调用完成后触发SET_MANAGER_ADDRESS_NOTIFICATION通知。\r\n        setManagerAddress        : function (address) { HOMEBROWSER.command(\"setParam\", [\"managerAddress\", address]); },\r\n\t    // 上层调用此方法获得服务器地址, 调用完成后触发GET_MANAGER_ADDRESS_NOTIFICATION通知。\r\n        getManagerAddress        : function () { HOMEBROWSER.command(\"getParam\", [\"managerAddress\"]); },\r\n\r\n        // 上层调用此方法获得当前用户deviceId,  调用完成后触发LOGGING_STATUS_NOTIFICATION通知。\r\n        getDeviceId: function () { HOMEBROWSER.command(\"getParam\", [\"deviceId\"]); },\r\n\r\n        // 上层调用此方法获得当前用户是否第一次打开,  调用完成后触发LOGGING_STATUS_NOTIFICATION通知。\r\n        getFirstLogin: function () { HOMEBROWSER.command(\"getParam\", [\"firstLogin\"]); },\r\n\r\n\t    // 上层调用此方法获得当前用户登录状态,  调用完成后触发LOGGING_STATUS_NOTIFICATION通知。\r\n        getLoggingStatus: function () { LOGINSTATUS = null; HOMEBROWSER.command(\"getParam\", [\"loggingStatus\"]); },\r\n\t    // 上层调用此方法获得上次登录时的信息,  调用完成后触发GET_LAST_LOGIN_INFO_NOTIFICATION通知。\r\n        getLastLoginInfo: function () { HOMEBROWSER.command(\"getParam\", [\"lastLoginInfo\"]); },\r\n\r\n\t    // 上层调用此方法获得用户信息， 调用完成后触发GET_APP_GROUP_LIST_NOTIFICATION通知。\r\n        getAppGroupList: function () { HOMEBROWSER.command(\"getParam\", [\"appGroupList\"]); },\r\n\r\n\t    // 上层调用此方法获得用户信息， 调用完成后触发GET_ACCOUNT_INFO_NOTIFICATION通知。\r\n        getAccountInfo: function () { HOMEBROWSER.command(\"getParam\", [\"accountInfo\"]); },\r\n\r\n        // 上层调用此方法设置应用市场中的应用状态， 调用完成后触发GET_ACCOUNT_INFO_NOTIFICATION通知。\r\n        setApplicationInfo: function (applicationId, status) { HOMEBROWSER.command(\"setParam\", [\"setApplicationStatus\", applicationId, status]); },\r\n\r\n\t    // 上层调用此方法注册指定的通知\r\n        // 目前支持的通知事件有：\r\n\t    //     LOGGING_STATUS_NOTIFICATION\r\n\t    //     GET_ACCOUNT_INFO_NOTIFICATION\r\n\t    //     GET_APP_GROUP_LIST_NOTIFICATION\r\n\t    //     GET_AUTO_LOGIN_NOTIFICATION\r\n\t    //     SET_AUTO_LOGIN_NOTIFICATION\r\n\t    //     GET_MANAGER_ADDRESS_NOTIFICATION\r\n\t    //     SET_MANAGER_ADDRESS_NOTIFICATION\r\n\t    //     LOGOUTED_NOTIFICATION\r\n        registNotification       : _registNotification,\r\n\t    // 上层调用此方法删除已经注册的指定通知事件。       \r\n        unregistNotification     : _unregistNotification,\r\n\t};\r\n} ();\r\n\r\n"]}